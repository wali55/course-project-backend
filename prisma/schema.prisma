generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  username  String   @unique
  email     String   @unique
  password  String?
  role      Role     @default(USER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  googleId  String?
  githubId  String?

  inventories     Inventory[]
  inventoryAccess InventoryAccess[]
  inventoryItems  InventoryItem[]

  @@map("users")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())

  inventories Inventory[]

  @@map("categories")
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())

  inventories InventoryOnTag[]

  @@map("tags")
}

model Inventory {
  id          String   @id @default(cuid())
  title       String
  description String?
  image       String?
  isPublic    Boolean  @default(false)
  version     Int      @default(1)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  idFormat     IdFormat?
  creatorId    String
  creator      User              @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  categoryId   String
  category     Category          @relation(fields: [categoryId], references: [id])
  tags         InventoryOnTag[]
  accessList   InventoryAccess[]
  customFields CustomField[]
  items        InventoryItem[]

  @@map("inventories")
}

model CustomField {
  id          String    @id @default(cuid())
  title       String
  description String?
  fieldType   FieldType
  showInTable Boolean   @default(false)
  sortOrder   Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  inventoryId String
  inventory   Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)

  @@unique([inventoryId, title])
  @@map("custom_fields")
}

model IdFormat {
  id        String   @id @default(cuid())
  elements  Json     @default("[]")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  inventoryId String    @unique
  inventory   Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)

  @@map("id_formats")
}

model InventoryItem {
  id        String   @id @default(cuid())
  customId  String?
  createdBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  inventoryId String
  inventory   Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  creator     User      @relation(fields: [createdBy], references: [id])
  fieldValues Json      @default("{}")

  @@unique([inventoryId, customId])
  @@map("inventory_items")
}

model InventoryAccess {
  id        String   @id @default(cuid())
  grantedBy String
  grantedAt DateTime @default(now())

  inventoryId String
  inventory   Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([inventoryId, userId])
  @@map("inventory_access")
}

model InventoryOnTag {
  inventoryId String
  inventory   Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  tagId       String
  tag         Tag       @relation(fields: [tagId], references: [id], onDelete: Cascade)
  assignedAt  DateTime  @default(now())

  @@id([inventoryId, tagId])
  @@map("inventory_tags")
}

enum Role {
  USER
  ADMIN
}

enum FieldType {
  SINGLE_TEXT
  MULTI_TEXT
  NUMBER
  DOCUMENT_LINK
  BOOLEAN
}
